name: Release Analysis

on: 
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  analyze_release:
    runs-on: ubuntu-latest
    permissions:
      contents: write  # صلاحية لتعديل الريبو ورفع الـ ags
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # عشان نجيب تاريخ الـ Git كامل بما فيه الـ tag

      - name: Build and Run Docker Image
        run: |
          docker run -d --name release-container \
            -p 5000:5000 \
            -e REPO_URL=https://github.com/${{ github.repository }}.git \
            mostfarwag/release:4

      - name: Wait for API and Script to Complete
        id: wait-for-container  # نضيف id عشان نستخدم outputs
        run: |
          # انتظار الـ logs لمعرفة متى ينتهي التحليل
          docker logs -f release-container > container_logs.txt &
          docker wait release-container
          
          # استخراج التاج الجديد من الـ logs
          NEW_TAG=$(grep "New tag created and pushed" container_logs.txt | awk '{print $NF}')
          echo "NEW_TAG=$NEW_TAG" >> $GITHUB_ENV  # حفظ التاج كمتغير بيئة

      - name: Run Dart Script Inside Docker Container
        run: |
          docker exec release-container dart run release_manager.dart ${{ env.NEW_TAG }}

      - name: Stop Docker Container
        if: always()
        run: |
          docker stop release-container || true
          docker rm release-container || true

      - name: Configure Git identity
        run: |
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git config --global user.name "GitHub Actions"

      - name: Create and Push New Tag Directly
        run: |
          echo "Old tag from Docker: ${{ env.NEW_TAG }}"
          git tag "${{ env.NEW_TAG }}" -m "New tag from release analysis"
          git push origin "${{ env.NEW_TAG }}"
